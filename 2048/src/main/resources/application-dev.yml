server:
  port: 2048
spring:
  application:
    name: service-rest-base2048
  datasource:
    #    driverClassName: oracle.jdbc.driver.OracleDriver
    #    url: jdbc:oracle:thin:@127.0.0.1:1521:orcl
    #    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    #    url: jdbc:p6spy:oracle:thin:@127.0.0.1:1521:orcl
    #    username: base2048
    #    password: base2048

    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/base2048?useSSL=false&serverTimezone=UTC&autoReconnect=true&allowPublicKeyRetrieval=true&useOldAliasMetadataBehavior=true
    username: root
    password: mysql
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
        namespace: 9047c5e7-ee93-498f-9c79-10f53a92310f
        username: nacos
        password: nacos123
        metadata:
          user.name: ${spring.security.user.name}
          user.password: ${spring.security.user.password}
      config:
        username: ${spring.cloud.nacos.discovery.username}
        password: ${spring.cloud.nacos.discovery.password}
  liquibase:
    enabled: true
    change-log: classpath:liquibase/master.xml
  redis:
    # Redis服务器地址
    host: 127.0.0.1
    # Redis数据库索引（默认为0）
    database: 0
    # Redis服务器连接端口
    port: 6389
    # Redis服务器连接密码（默认为空）
    password: redis2021
    # 连接超时时间
    timeout: 1000ms
    lettuce:
      pool:
        # 连接池最大连接数
        max-active: 8
        # 连接池最大空闲连接数
        max-idle: 8
        # 连接池最小空闲连接数
        min-idle: 0
        # 连接池最大阻塞等待时间，负值表示没有限制
        max-wait: -1ms
  cache:
    type: redis
    redis:
      time-to-live: 300000
  messages:
    basename: i18n/message
  freemarker:
    cache: false
    settings:
      template_update_delay: 0
  security:
    user:
      name: "admin"
      password: "client123"
  quartz:
    # 数据库存储方式
    job-store-type: jdbc
    #定时任务启动开关，true-开  false-关
    auto-startup: true
    #延迟1秒启动定时任务
    startup-delay: 1s
    #启动时更新己存在的Job
    overwrite-existing-jobs: true
    # 关闭系统的时候，等待定时任务完成
    wait-for-jobs-to-complete-on-shutdown: true
    jdbc:
      #数据库架构初始化模式--never 从不进行初始化，always 每次都清空数据库进行初始化,embedded 只初始化内存数据库（默认值）
      initialize-schema: always
# 开启监控所有项
management:
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /actuator
  endpoint:
    health:
      show-details: ALWAYS
  server:
    port: 12048


logging:
  level:
    root: info
    com.neusoft.jn: debug
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: classpath*:**/mapper/mybatis/xml/*.xml


  # 滑动验证，底图路径，不配置将使用默认图片
  # 支持全路径
  # 支持项目路径,以classpath:开头,取resource目录下路径,例：classpath:images/jigsaw
aj:
  captcha:
    jigsaw: classpath:images/jigsaw
    # 右下角水印文字(我的水印)
    #aj.captcha.water-mark=我的水印
    water-mark: taichi_coder
  # 滑动验证，底图路径，不配置将使用默认图片
  # 支持全路径
  # 支持项目路径,以classpath:开头,取resource目录下路径,例：classpath:images/pic-click
  pic-click: classpath:images/pic-click
  # 对于分布式部署的应用，我们建议应用自己实现CaptchaCacheService，比如用Redis或者memcache，
  # 参考CaptchaCacheServiceRedisImpl.java
  # 如果应用是单点的，也没有使用redis，那默认使用内存。
  # 内存缓存只适合单节点部署的应用，否则验证码生产与验证在节点之间信息不同步，导致失败。
  # ！！！ 注意啦，如果应用有使用spring-boot-starter-data-redis，
  # 请打开CaptchaCacheServiceRedisImpl.java注释。
  # redis ----->  SPI： 在resources目录新建META-INF.services文件夹(两层)，参考当前服务resources。
  # 缓存local/redis...
  cache-type: local
  # local\u7F13\u5B58\u7684\u9608\u503C,\u8FBE\u5230\u8FD9\u4E2A\u503C\uFF0C\u6E05\u9664\u7F13\u5B58
  #aj.captcha.cache-number=1000
  # local\u5B9A\u65F6\u6E05\u9664\u8FC7\u671F\u7F13\u5B58(\u5355\u4F4D\u79D2),\u8BBE\u7F6E\u4E3A0\u4EE3\u8868\u4E0D\u6267\u884C
  #aj.captcha.timing-clear=180
  #spring.redis.host=10.108.11.46
  #spring.redis.port=6379
  #spring.redis.password=
  #spring.redis.database=2
  #spring.redis.timeout=6000

  # 验证码类型default两种都实例化。
  type: default
  # 汉字统一使用Unicode,保证程序通过@value读取到是中文，可通过这个在线转换
  # https://tool.chinaz.com/tools/unicode.aspx 中文转Unicode


  # 右下角水印字体(不配置时，默认使用文泉驿正黑)
  # 由于宋体等涉及到版权，我们jar中内置了开源字体【文泉驿正黑】
  # 方式一：直接配置OS层的现有的字体名称，比如：宋体
  # 方式二：自定义特定字体，请将字体放到工程resources下fonts文件夹，支持ttf\ttc\otf字体
  # aj.captcha.water-font=WenQuanZhengHei.ttf
  # 点选文字验证码的文字字体(文泉驿正黑)
  # aj.captcha.font-type=WenQuanZhengHei.ttf
  # 校验滑动拼图允许误差偏移量(默认5像素)
  lip-offset: 5
  # aes加密坐标开启或者禁用(true|false)
  aes-status: true
  # 滑动干扰项(0/1/2)
  interference-options: 2
  #点选字体样式 默认Font.BOLD
  font-style: 1
  #点选字体字体大小
  aj.captcha.font-size: 25
  #点选文字个数,存在问题，暂不支持修改
  #aj.captcha.click-word-count=4


  history-data-clear-enable: false

  # 接口请求次数一分钟限制是否开启 true|false
  req-frequency-limit-enable: false
  # 验证失败5次，get接口锁定
  req-get-lock-limit: 5
  # 验证失败后，锁定时间间隔,s
  req-get-lock-seconds: 30
  # get接口一分钟内请求数限制
  req-get-minute-limit: 30
  # check接口一分钟内请求数限制
  req-check-minute-limit: 30
  # verify接口一分钟内请求数限制(暂用不上，可后台直接调用captchaService)
  #aj.captcha.req-verify-minute-limit=30

#  为了Hystrix传播ThreadLocal对象 feign.hystrix.enabled = false
feign:
  hystrix:
    enabled: false
  client:
    config:
      default:
        readTimeout: 9000
        connectTimeout: 9000
      service-rest-workflow3072:
        readTimeout: 9000
        connectTimeout: 9000
seata:
  application-id: ${spring.application.name}
  tx-service-group: my_test_tx_group
  enable-auto-data-source-proxy: true
  client:
    undo:
      log-serialization: kryo
  registry:
    type: nacos
    nacos:
      server-addr: 127.0.0.1:8848
      namespace: a667f2c4-d1f7-466b-80e7-2fa043135670
      group: SEATA_GROUP
      username: ${spring.cloud.nacos.discovery.username}
      password: ${spring.cloud.nacos.discovery.password}
  config:
    type: nacos
    nacos:
      server-addr: 127.0.0.1:8848
      namespace: a667f2c4-d1f7-466b-80e7-2fa043135670
      group: SEATA_GROUP
      username: ${spring.cloud.nacos.discovery.username}
      password: ${spring.cloud.nacos.discovery.password}
base2048:
  table-schema: BASE2048
  user:
    password:
      default: Pass6666!
      crypt: sm4
  token:
    mode: redis   # jwt 或者 redis
  default:
    admin-div:
      value: 37,370000
      label: 山东省本级
  job:
    enable: true
    datasource:
      driver-class-name: ${spring.datasource.driver-class-name}
      url: jdbc:mysql://localhost:3306/base2048job?useSSL=false&serverTimezone=UTC&autoReconnect=true&allowPublicKeyRetrieval=true&useOldAliasMetadataBehavior=true
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
generator:
  author: 虚领顶劲气沉丹田
  vue:
    path: C:\mytemp\auto
    apipath: C:\mytemp\auto
  dto:
    path: C:\mytemp\auto

